import React, { useState, useEffect } from "react";
import * as XLSX from "xlsx";
import { Bar } from "react-chartjs-2";
import "chart.js/auto";

const Dashboard = () => {
  const [chartData, setChartData] = useState({});
  const [originalData, setOriginalData] = useState([]);
  const [filterData, setFilterData] = useState([]);
  const [currentLevel, setCurrentLevel] = useState("main");
  const [clickedCategory, setClickedCategory] = useState(null);

  useEffect(() => {
    fetch("/Login_ngdr Manojsir.xlsx")
      .then((response) => response.arrayBuffer())
      .then((dataBuffer) => {
        const workbook = XLSX.read(dataBuffer, { type: "array" });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(sheet);
        setOriginalData(data);
        initializeChart(data);
      })
      .catch((error) => {
        console.error("Error loading the Excel file:", error);
      });
  }, []);

  const initializeChart = (data) => {
    const nationalUsers = data.filter((row) => row.country_name === "India");
    const internationalUsers = data.filter((row) => row.country_name !== "India");

    setChartData({
      labels: ["National", "International"],
      datasets: [
        {
          label: "Users",
          data: [nationalUsers.length, internationalUsers.length],
          backgroundColor: ["#0A5678", "#3B9EA0"],
        },
      ],
    });
    setCurrentLevel("main");
    setClickedCategory(null);
  };

  const drillDownToGovNonGov = (category) => {
    const isNational = category === "National";
    const filteredData = isNational
      ? originalData.filter((row) => row.country_name === "India")
      : originalData.filter((row) => row.country_name !== "India");

    const govUsers = filteredData.filter(
      (row) => typeof row.email === "string" && row.email.toLowerCase().includes("gov")
    );
    const nonGovUsers = filteredData.filter(
      (row) => typeof row.email !== "string" || !row.email.toLowerCase().includes("gov")
    );

    setFilterData(filteredData);
    setChartData({
      labels: ["Gov", "Non-Gov"],
      datasets: [
        {
          label: "Users",
          data: [govUsers.length, nonGovUsers.length],
          backgroundColor: ["#FFC107", "#FF5722"],
        },
      ],
    });
    setCurrentLevel("govNonGov");
    setClickedCategory(category);
  };

  const drillDownToGSIAMD = (category) => {
    const isGov = category === "Gov";
    const filteredData = filterData.filter((row) =>
      isGov
        ? typeof row.email === "string" && row.email.toLowerCase().includes("gov")
        : typeof row.email === "string" && !row.email.toLowerCase().includes("gov")
    );

    const gsiUsers = filteredData.filter(
      (row) => typeof row.email === "string" && row.email.toLowerCase().includes("gsi")
    );
    const amdUsers = filteredData.filter(
      (row) => typeof row.email === "string" && row.email.toLowerCase().includes("amd")
    );
    const otherUsers = filteredData.filter(
      (row) =>
        typeof row.email === "string" &&
        !row.email.toLowerCase().includes("gsi") &&
        !row.email.toLowerCase().includes("amd")
    );

    // Debugging logs
    console.log("Filtered Data:", filteredData);
    console.log("GSI Users:", gsiUsers);
    console.log("AMD Users:", amdUsers);
    console.log("Other Users:", otherUsers);

    setChartData({
      labels: ["GSI", "AMD", "Other"],
      datasets: [
        {
          label: "Users",
          data: [
            gsiUsers.length || 0, // Ensure it shows 0 if no users
            amdUsers.length || 0, // Ensure it shows 0 if no users
            otherUsers.length || 0 // Ensure it shows 0 if no users
          ],
          backgroundColor: ["#FF9800", "#8BC34A", "#03A9F4"],
        },
      ],
    });
    setCurrentLevel("gsiAmd");
 };

  const handleBarClick = (event, elements) => {
    if (elements.length > 0) {
      const clickedIndex = elements[0].index;
      const clickedLabel = chartData.labels[clickedIndex];

      if (currentLevel === "main") {
        drillDownToGovNonGov(clickedLabel);
      } else if (currentLevel === "govNonGov") {
        drillDownToGSIAMD(clickedLabel);
      }
    }
  };

  const handleBackClick = () => {
    if (currentLevel === "gsiAmd") {
      drillDownToGovNonGov(clickedCategory);
    } else if (currentLevel === "govNonGov") {
      initializeChart(originalData);
    }
  };

  return (
    <div
      style={{
        fontFamily: "Arial, sans-serif",
        backgroundColor: "#F5F5F5",
        minHeight: "100vh",
        padding: "20px",
      }}
    >
      <div
        style={{
          backgroundColor: "#0A5678",
          color: "#FFFFFF",
          padding: "10px 20px",
          borderRadius: "8px 8px 0 0",
          textAlign: "center",
        }}
      >
        <h2 style={{ margin: 0 }}>National/International Users</h2>
      </div>

      <div
        style={{
          backgroundColor: "#FFFFFF",
          padding: "20px",
          borderRadius: "0 0 8px 8px",
          boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
        }}
      >
        <div
          style={{
            marginTop: "20px",
            height: "300px",
            position: "relative",
          }}
        >
          {chartData.labels ? (
            <Bar
              data={chartData}
              options={{
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    display: true,
                    position: "top",
                  },
                },
                onClick: handleBarClick,
                scales: {
                  x: {
                    stacked: true,
                  },
                  y: {
                    stacked: true,
                    beginAtZero: true,
                  },
                },
              }}
            />
          ) : (
            <p>Loading...</p>
          )}
        </div>

        {currentLevel !== "main" && (
          <div style={{ textAlign: "center", marginTop: "20px" }}>
            <button
              style={{
                backgroundColor: "#FF5733",
                color: "#FFFFFF",
                padding: "10px 20px",
                border: "none",
                borderRadius: "5px",
                cursor: "pointer",
              }}
              onClick={handleBackClick}
            >
              Back
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
